---
- hosts: 127.0.0.1
  connection: local
  vars:
    - root_directory: "/home/root/oracle"
    - environment_name: "dev"
    - container_registry: "container-registry.oracle.com"
    - container_registry_username: ""
    - container_registry_password: ""
    - container_registry_local: "localhost/"
    - autonomous_database_tag: "1"
    - weblogic_server_tag: "1"
    - weblogic_ords_version: "24.2.3.201.1847"
    - autonomous_database_wallet_password: "123456789aA123"
    - autonomous_admin_password: "123456789aA123"
    - weblogic_username: "hello"
    - weblogic_password: "123456789"
    - github_username: ""
    - github_password: ""
    - weblogic_base_image: "container-registry.oracle.com/middleware/weblogic:14.1.1.0-11"
    - build_security_properties: |-
        username={{ weblogic_username }}
        password={{ weblogic_password }}
    - security_properties: |-
        username={{ weblogic_username }}
        password={{ weblogic_password }}
        JAVA_OPTIONS=-Dweblogic.StdoutDebugEnabled=true -Dweblogic.security.SSL.ignoreHostnameVerification=true
  tasks:
    - name: Print hostname information
      ansible.builtin.shell: |
        hostname
      args:
        executable: /bin/bash
      become: true

    - name: Login to  and create containers/auth.json
      containers.podman.podman_login:
        username: "{{ container_registry_username }}"
        password: "{{ container_registry_password }}"
        registry: "{{ container_registry }}"
      become: true

    - name: Clone a repo with separate git directory
      ansible.builtin.git:
        repo: https://github.com/oracleweboadb/oracle
        dest: /home/root/oracle
        version: main
        force: yes
      become: true

#    - name: Clone a repo with separate git directory
#      ansible.builtin.git:
#        repo: https://{{ github_username }}:{{ github_password }}@github.com/MTA-IT-Middleware-Platform-Technology/ordsapps
#        dest: /home/root/oracle
#        version: main
#        force: yes
#      become: true

#    - name: Download ords
#      ansible.builtin.shell: |
#        mkdir -p {{ root_directory }}/{{ environment_name }}/oracle-main/weblogic-server/resources
#        cd {{ root_directory }}/{{ environment_name }}/oracle-main/weblogic-server/resources
#        curl -o ords.zip https://download.oracle.com/otn_software/java/ords/ords-{{ weblogic_ords_version }}.zip
#        unzip -o ords.zip

#    - name: Build a autonomous database image
#      ansible.builtin.shell: |
#        export CUSTOM_IMAGE_TAG="oracle/oad:{{ autonomous_database_tag }}"
#
#        chown -R $USER {{ root_directory }}
#        chmod -R +x {{ root_directory }}
#        chmod +x {{ root_directory }}/{{ environment_name }}/oracle-main/autonomous-database/build.sh
#        {{ root_directory }}/{{ environment_name }}/oracle-main/autonomous-database/build.sh $CUSTOM_IMAGE_TAG
#      args:
#        executable: /bin/bash
#      become: true

    - name: Creating a file with content
      copy:
        dest: "{{ root_directory }}/{{ environment_name }}/oracle-main/weblogic-server/properties/docker-build/domain_security.properties"
        content: "{{ build_security_properties }}"
      become: true

#    - name: Ensure oadb container is stopped
#      ansible.builtin.systemd:
#        name: container-oadb
#        daemon_reload: true
#        state: stopped
#        enabled: true
#      become: true
#      ignore_errors: true

    - name: Ensure weblogic-admin container is stopped
      ansible.builtin.systemd:
        name: container-weblogic-admin
        daemon_reload: true
        state: stopped
        enabled: true
      become: true
      ignore_errors: true

    - name: Ensure managed-server-1 container is stopped
      ansible.builtin.systemd:
        name: container-wls_ords1
        daemon_reload: true
        state: stopped
        enabled: true
      become: true
      ignore_errors: true

    - name: Ensure managed-server-2 container is stopped
      ansible.builtin.systemd:
        name: container-wls_ords1
        daemon_reload: true
        state: stopped
        enabled: true
      become: true
      ignore_errors: true

    - name: Create a oadb volume
      containers.podman.podman_volume:
        state: present
        name: oadb_volume
        label:
          owner: autonomous-database
      become: true

    - name: Create a podman network
      containers.podman.podman_network:
        name: oracle_network
      become: true

#    - name: "Create the autonomous database container"
#      containers.podman.podman_container:
#        name: oadb
#        hostname: oadb
#        image: "{{ container_registry_local }}oracle/oad:{{ autonomous_database_tag }}"
#        publish:
#          - 1521:1522
#          - 1522:1522
#          - 8443:8443
#          - 27017:27017
#        env:
#          WORKLOAD_TYPE: ATP
#          WALLET_PASSWORD: "{{ autonomous_database_wallet_password }}"
#          ADMIN_PASSWORD: "{{ autonomous_admin_password }}"
#        cap_add:
#          - SYS_ADMIN
#        device:
#          - /dev/fuse
#        volume:
#          - "oadb_volume:/u01/data"
#        state: created
#        network: "oracle_network"
#        network_aliases:
#          - "oadb"
#        recreate: true
#        rm: true
#        generate_systemd:
#          names: true
#          restart_policy: always
#      become: true

#    - name: Generate systemd unit file for oadb
#      containers.podman.podman_generate_systemd:
#        name: oadb
#        new: true
#        no_header: true
#        dest: /etc/systemd/system
#      become: true

#    - name: Ensure oadb container is started and enabled
#      ansible.builtin.systemd:
#        name: container-oadb
#        daemon_reload: true
#        state: started
#        enabled: true
#      become: true

    - name: Wait for OADB to be healthy
      ansible.builtin.shell: |
        podman wait --condition healthy oadb
        echo "OADB is healthy and ready to accept connections!"
      become: true

    - name: Download wallet so that ORDS can use it
      ansible.builtin.shell: |
        podman cp oadb:/u01/app/oracle/wallets/tls_wallet ./
        ls
        
        cd tls_wallet
        
        pwd
        ls
        sed -i 's/localhost/oadb/g' tnsnames.ora 
        
        zip -r tls_wallet.zip .
        cp tls_wallet.zip {{ root_directory }}/{{ environment_name }}/oracle-main/weblogic-server/resources/tls_wallet.zip
      become: true
      register: wallet_configuration

    - debug: msg="STDOUT:{{ wallet_configuration.stdout }}\n-----\nSTDERR:{{ wallet_configuration.stderr }}"

    - name: Add IP address so resolution of oadb works correctly
      lineinfile:
        dest: /etc/hosts
        line: '172.17.0.1 oadb'
        state: present

    - name: Ensure the directory /home/root/oracle exists
      ansible.builtin.file:
        path: /home/root/properties
        state: directory
        mode: '0777'
      become: true

    - name: Creating a file with content
      copy:
        dest: "/home/root/properties/security.properties"
        content: "{{ security_properties }}"
      become: true

    - name: Build a weblogic server image
      ansible.builtin.shell: |
        export CUSTOM_IMAGE_TAG="oracle/weblogic:{{ weblogic_server_tag }}"
        export WEBLOGIC_USERNAME={{ weblogic_username }}
        export WEBLOGIC_PASSWORD={{ weblogic_password }}
        export PROPERTIES_PATH={{ root_directory }}/{{ environment_name }}/oracle-main/weblogic-server/properties/docker-build/domain_security.properties
        
        chown -R $USER {{ root_directory }}
        chmod +x {{ root_directory }}/{{ environment_name }}/oracle-main/weblogic-server/build.sh
        {{ root_directory }}/{{ environment_name }}/oracle-main/weblogic-server/build.sh {{ weblogic_base_image }}
      args:
        executable: /bin/bash
      become: true
      register: weblogic_build

    - debug: msg="STDOUT:{{ weblogic_build.stdout }}\n-----\nSTDERR:{{ weblogic_build.stderr }}"

    - name: "Create the admin weblogic server container"
      containers.podman.podman_container:
        name: weblogic-admin
        hostname: weblogic-admin
        image: "{{ container_registry_local }}oracle/weblogic:{{ weblogic_server_tag }}"
        network: "oracle_network"
        network_aliases:
          - "AdminServer"
        publish:
          - 7001:7002
        volume:
          - "/home/root/properties:/u01/oracle/properties:Z"
        state: created
        rm: true
        recreate: true
      become: true

    - name: "Create the managed weblogic server container 1"
      containers.podman.podman_container:
        name: wls_ords1
        hostname: wls_ords1
        image: "{{ container_registry_local }}oracle/weblogic:{{ weblogic_server_tag }}"
        env:
          MANAGED_SERV_NAME: "WLS_ORDS1"
        publish:
          - 8001:8002
        volume:
          - "/home/root/properties:/u01/oracle/properties:Z"
        state: created
        rm: true
        recreate: true
        command: "startManagedServer.sh"
        network: "oracle_network"
        network_aliases:
          - "WLS_ORDS1"
        generate_systemd:
          names: true
          restart_policy: always
      become: true

    - name: "Create the managed weblogic server container 2"
      containers.podman.podman_container:
        name: wls_ords2
        hostname: wls_ords2
        image: "{{ container_registry_local }}oracle/weblogic:{{ weblogic_server_tag }}"
        env:
          MANAGED_SERV_NAME: "WLS_ORDS2"
        publish:
          - 8002:8002
        volume:
          - "/home/root/properties:/u01/oracle/properties:Z"
        state: created
        rm: true
        recreate: true
        command: "startManagedServer.sh"
        network: "oracle_network"
        network_aliases:
          - "WLS_ORDS2"
        generate_systemd:
          names: true
          restart_policy: always
      become: true

    - name: Generate systemd unit file for weblogic-admin
      containers.podman.podman_generate_systemd:
        name: weblogic-admin
        new: true
        no_header: true
        dest: /etc/systemd/system
      become: true

    - name: Ensure weblogic-admin container is started and enabled
      ansible.builtin.systemd:
        name: container-weblogic-admin
        daemon_reload: true
        state: started
        enabled: true
      become: true

    - name: Generate systemd unit file for managed-server-1
      containers.podman.podman_generate_systemd:
        name: wls_ords1
        new: true
        no_header: true
        dest: /etc/systemd/system
      become: true

    - name: Ensure managed-server-1 container is started and enabled
      ansible.builtin.systemd:
        name: container-wls_ords1
        daemon_reload: true
        state: started
        enabled: true
      become: true

    - name: Generate systemd unit file for managed-server-2
      containers.podman.podman_generate_systemd:
        name: wls_ords2
        new: true
        no_header: true
        dest: /etc/systemd/system
      become: true

    - name: Ensure managed-server-2 container is started and enabled
      ansible.builtin.systemd:
        name: container-wls_ords2
        daemon_reload: true
        state: started
        enabled: true
      become: true